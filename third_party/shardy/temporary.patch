diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index ad149cc..509398d 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,97 +1 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/llvm/lib/CodeGen/MachineConvergenceVerifier.cpp b/llvm/lib/CodeGen/MachineConvergenceVerifier.cpp
---- a/llvm/lib/CodeGen/MachineConvergenceVerifier.cpp
-+++ b/llvm/lib/CodeGen/MachineConvergenceVerifier.cpp
-@@ -51,7 +51,9 @@
-   const MachineRegisterInfo &MRI = Context.getFunction()->getRegInfo();
-   const MachineInstr *TokenDef = nullptr;
- 
--  for (const MachineOperand &MO : MI.all_uses()) {
-+  for (const MachineOperand &MO : MI.operands()) {
-+    if (!MO.isReg() || !MO.isUse())
-+      continue;
-     Register OpReg = MO.getReg();
-     if (!OpReg.isVirtual())
-       continue;
-diff -ruN --strip-trailing-cr a/llvm/lib/CodeGen/MachineInstr.cpp b/llvm/lib/CodeGen/MachineInstr.cpp
---- a/llvm/lib/CodeGen/MachineInstr.cpp
-+++ b/llvm/lib/CodeGen/MachineInstr.cpp
-@@ -1041,9 +1041,10 @@
- /// Returns true if the MachineInstr has an implicit-use operand of exactly
- /// the given register (not considering sub/super-registers).
- bool MachineInstr::hasRegisterImplicitUseOperand(Register Reg) const {
--  for (const MachineOperand &MO : all_uses())
--    if (MO.isImplicit() && MO.getReg() == Reg)
-+  for (const MachineOperand &MO : operands()) {
-+    if (MO.isReg() && MO.isUse() && MO.isImplicit() && MO.getReg() == Reg)
-       return true;
-+  }
-   return false;
- }
- 
-@@ -1263,8 +1264,10 @@
- /// clearKillInfo - Clears kill flags on all operands.
- ///
- void MachineInstr::clearKillInfo() {
--  for (MachineOperand &MO : all_uses())
--    MO.setIsKill(false);
-+  for (MachineOperand &MO : operands()) {
-+    if (MO.isReg() && MO.isUse())
-+      MO.setIsKill(false);
-+  }
- }
- 
- void MachineInstr::substituteRegister(Register FromReg, Register ToReg,
-@@ -1546,9 +1549,12 @@
- /// allDefsAreDead - Return true if all the defs of this instruction are dead.
- ///
- bool MachineInstr::allDefsAreDead() const {
--  for (const MachineOperand &MO : all_defs())
-+  for (const MachineOperand &MO : operands()) {
-+    if (!MO.isReg() || MO.isUse())
-+      continue;
-     if (!MO.isDead())
-       return false;
-+  }
-   return true;
- }
- 
-@@ -2057,8 +2063,8 @@
-                                       const TargetRegisterInfo *RegInfo) {
-   if (!Reg.isPhysical())
-     RegInfo = nullptr;
--  for (MachineOperand &MO : all_uses()) {
--    if (!MO.isKill())
-+  for (MachineOperand &MO : operands()) {
-+    if (!MO.isReg() || !MO.isUse() || !MO.isKill())
-       continue;
-     Register OpReg = MO.getReg();
-     if ((RegInfo && RegInfo->regsOverlap(Reg, OpReg)) || Reg == OpReg)
-diff -ruN --strip-trailing-cr a/llvm/lib/CodeGen/RegAllocFast.cpp b/llvm/lib/CodeGen/RegAllocFast.cpp
---- a/llvm/lib/CodeGen/RegAllocFast.cpp
-+++ b/llvm/lib/CodeGen/RegAllocFast.cpp
-@@ -1563,7 +1563,9 @@
-   bool ReArrangedImplicitMOs = true;
-   while (ReArrangedImplicitMOs) {
-     ReArrangedImplicitMOs = false;
--    for (MachineOperand &MO : MI.all_uses()) {
-+    for (MachineOperand &MO : MI.operands()) {
-+      if (!MO.isReg() || !MO.isUse())
-+        continue;
-       Register Reg = MO.getReg();
-       if (!Reg.isVirtual() || !shouldAllocateRegister(Reg))
-         continue;
-diff -ruN --strip-trailing-cr a/mlir/include/mlir/IR/Block.h b/mlir/include/mlir/IR/Block.h
---- a/mlir/include/mlir/IR/Block.h
-+++ b/mlir/include/mlir/IR/Block.h
-@@ -27,8 +27,8 @@
- class ValueTypeRange;
- 
- /// `Block` represents an ordered list of `Operation`s.
--class Block : public IRObjectWithUseList<BlockOperand>,
--              public llvm::ilist_node_with_parent<Block, Region> {
-+class alignas(8) Block : public IRObjectWithUseList<BlockOperand>,
-+                         public llvm::ilist_node_with_parent<Block, Region> {
- public:
-   explicit Block() = default;
-   ~Block();
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index d78e166..dd2bd1c 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "6b4b8dc4a45dccec43a9c0d76a80ebae50df55b0"
-    LLVM_SHA256 = "c98b83f609c14a9937fd933464bfca80167800c43fc2a8bf1554a031996d5325"
+    LLVM_COMMIT = "32bc670609fe9c938bca5b3c0e70e6b3934b4641"
+    LLVM_SHA256 = "958777aed7de701030080c9c65ff5c27e33cda012f47ee0146cf197495761763"
 
     tf_http_archive(
         name = name,
