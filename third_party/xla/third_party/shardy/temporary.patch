diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 509398d..cb55e72 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1 +1,34 @@
 Auto generated patch. Do not edit or delete it, even if empty.
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaTemplateDeduction.cpp b/clang/lib/Sema/SemaTemplateDeduction.cpp
+--- a/clang/lib/Sema/SemaTemplateDeduction.cpp
++++ b/clang/lib/Sema/SemaTemplateDeduction.cpp
+@@ -5505,8 +5505,11 @@
+   Sema::ArgumentPackSubstitutionIndexRAII PackIndex(
+       S, ArgIdx != -1 ? ::getPackIndexForParam(S, FTD, MLTAL, ArgIdx) : -1);
+   bool IsIncompleteSubstitution = false;
+-  QualType InstP = S.SubstType(P, MLTAL, FTD->getLocation(), FTD->getDeclName(),
+-                               &IsIncompleteSubstitution);
++  // FIXME: A substitution can be incomplete on a non-structural part of the
++  // type. Use the canonical type for now, until the TemplateInstantiator can
++  // deal with that.
++  QualType InstP = S.SubstType(P.getCanonicalType(), MLTAL, FTD->getLocation(),
++                               FTD->getDeclName(), &IsIncompleteSubstitution);
+   if (InstP.isNull() && !IsIncompleteSubstitution)
+     return TemplateDeductionResult::SubstitutionFailure;
+   if (!CheckConsistency)
+diff -ruN --strip-trailing-cr a/clang/test/SemaTemplate/GH18291.cpp b/clang/test/SemaTemplate/GH18291.cpp
+--- a/clang/test/SemaTemplate/GH18291.cpp
++++ b/clang/test/SemaTemplate/GH18291.cpp
+@@ -112,3 +112,12 @@
+     }
+   } // namespace explicit_obj_param
+ } // namespace static_vs_nonstatic
++
++namespace incomplete_on_sugar {
++  template <unsigned P, class T> void f(T[P]) = delete;
++  template <unsigned P> void f(int[][P]);
++  void test() {
++    int array[1][8];
++    f<8>(array);
++  }
++} // namespace incomplete_on_sugar
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index b4662d5..241aa75 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "6b6e2106f974286715bda1abf95d4ab08ac9946f"
-    LLVM_SHA256 = "077073cb028d3aae4f62275485bbb1c3d4a5e3cda2f01b6f616427e1a3c382d2"
+    LLVM_COMMIT = "1e19e1e1a471f648ff63f02114648211666669ca"
+    LLVM_SHA256 = "2881c24d9543286baa29a5f20874c5fdb57d657a22ab6cff77276cf2c192a1c3"
 
     tf_http_archive(
         name = name,
