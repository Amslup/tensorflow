FROM tensorflow/tensorflow:latest-devel

LABEL maintainer="Clayne Robison<clayne.b.robison@intel.com>"

# ARGs are parameterized. Use --build-args to override.
ARG WHL_DIR=/whl

RUN apt-get update && apt-get install -y --no-install-recommends \
        golang \
        vim \
        emacs \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN pip --no-cache-dir install --upgrade \
        pip setuptools

RUN pip --no-cache-dir install wheel 

# Set up Bazel.
# We should be able to remove this once tensorflow/tensorflow:latest-devel
# upgrades to BAZEL 0.11.0

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.11.0
WORKDIR /
RUN mkdir -p /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh



#Remove existing sources
WORKDIR /
RUN rm -rf tensorflow

# Download and build TensorFlow.
WORKDIR /tensorflow
RUN git clone --branch=r1.6 --depth=1 https://github.com/tensorflow/tensorflow.git .

ENV CI_BUILD_PYTHON=python

# Build and Install TensorFlow.
# The 'mkl' option builds with Intel(R) Math Kernel Library (MKL), which detects
# the platform it is currently running on and takes appropriately optimized 
# paths. The -march=native option is for code that is not in MKL, and assumes
# this container will be run on the same architecture on which it is built.
RUN tensorflow/tools/ci_build/builds/configured CPU \
    bazel build -c opt --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        # For optimized builds appropriate for the hardware platform of your choosing, uncomment below...
        # For ivy-bridge or sandy-bridge
        # --copt=-march="ivybridge" \
        # for haswell, broadwell, or skylake
        # --copt=-march="haswell" \
        tensorflow/tools/pip_package:build_pip_package && \
    mkdir ${WHL_DIR} && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package ${WHL_DIR}

# Clean up Bazel cache when done, but leave the whl.
# This will upgrade the default Tensorflow version with the Intel MKL version
RUN pip --no-cache-dir install --upgrade ${WHL_DIR}/tensorflow-*.whl && \
    rm -rf /root/.cache

WORKDIR /root

#add welcome message with instructions

RUN echo '[ ! -z "$TERM" -a -r /etc/motd ] && cat /etc/issue && cat /etc/motd' \
	>> /etc/bash.bashrc \
	; echo "\
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\
|								\n\
| Docker container running Ubuntu				\n\
| with TensorFlow optimized for CPU			\n\
| with Intel(R) MKL						\n\
|								\n\
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\n\
\n "\
	> /etc/motd
