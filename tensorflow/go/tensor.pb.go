// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/tensor.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Protocol buffer representing a tensor.
type TensorProto struct {
	Dtype DataType `protobuf:"varint,1,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
	// Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
	TensorShape *TensorShapeProto `protobuf:"bytes,2,opt,name=tensor_shape" json:"tensor_shape,omitempty"`
	// Version number.
	//
	// In version 0, if the "repeated xxx" representations contain only one
	// element, that element is repeated to fill the shape.  This makes it easy
	// to represent a constant Tensor with a single value.
	VersionNumber int32 `protobuf:"varint,3,opt,name=version_number" json:"version_number,omitempty"`
	// Serialized content from Tensor::AsProtoTensorContent(). This representation
	// can be used for all tensor types.
	TensorContent []byte `protobuf:"bytes,4,opt,name=tensor_content,proto3" json:"tensor_content,omitempty"`
	// DT_FLOAT.
	FloatVal []float32 `protobuf:"fixed32,5,rep,packed,name=float_val" json:"float_val,omitempty"`
	// DT_DOUBLE.
	DoubleVal []float64 `protobuf:"fixed64,6,rep,packed,name=double_val" json:"double_val,omitempty"`
	// DT_INT32, DT_INT16, DT_INT8, DT_UINT8.
	IntVal []int32 `protobuf:"varint,7,rep,packed,name=int_val" json:"int_val,omitempty"`
	// DT_STRING
	StringVal [][]byte `protobuf:"bytes,8,rep,name=string_val,proto3" json:"string_val,omitempty"`
	// DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
	// and imaginary parts of i-th single precision complex.
	ScomplexVal []float32 `protobuf:"fixed32,9,rep,packed,name=scomplex_val" json:"scomplex_val,omitempty"`
	// DT_INT64
	Int64Val []int64 `protobuf:"varint,10,rep,packed,name=int64_val" json:"int64_val,omitempty"`
	// DT_BOOL
	BoolVal []bool `protobuf:"varint,11,rep,packed,name=bool_val" json:"bool_val,omitempty"`
}

func (m *TensorProto) Reset()                    { *m = TensorProto{} }
func (m *TensorProto) String() string            { return proto.CompactTextString(m) }
func (*TensorProto) ProtoMessage()               {}
func (*TensorProto) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *TensorProto) GetTensorShape() *TensorShapeProto {
	if m != nil {
		return m.TensorShape
	}
	return nil
}

func init() {
	proto.RegisterType((*TensorProto)(nil), "tensorflow.TensorProto")
}

var fileDescriptor10 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0xd0, 0xd1, 0x4a, 0xf3, 0x30,
	0x14, 0x07, 0x70, 0xda, 0x7e, 0xdd, 0xba, 0xd3, 0x32, 0x3e, 0xea, 0x94, 0x30, 0xbc, 0x18, 0x8a,
	0xb2, 0x0b, 0x69, 0xa1, 0x8a, 0x0f, 0x20, 0x3e, 0x80, 0xe0, 0xee, 0x4b, 0xda, 0x65, 0x5a, 0x6c,
	0x73, 0x4a, 0x92, 0x6d, 0xfa, 0x60, 0xbe, 0x9f, 0xa7, 0x89, 0xb8, 0x5d, 0xe9, 0x5d, 0xf8, 0x9d,
	0xff, 0xf9, 0x1f, 0x08, 0x5c, 0x1b, 0x21, 0x35, 0xaa, 0x4d, 0x8b, 0xfb, 0xbc, 0x46, 0x25, 0xf2,
	0x8d, 0xe2, 0x9d, 0xd8, 0xa3, 0x7a, 0xcb, 0xdd, 0x24, 0xeb, 0x15, 0x1a, 0x4c, 0xe1, 0x90, 0x9b,
	0xdf, 0xfc, 0xb5, 0x53, 0xea, 0x57, 0xde, 0x0b, 0xb7, 0x39, 0xbf, 0xfa, 0x25, 0xfd, 0xd1, 0x0b,
	0xed, 0x62, 0x17, 0x9f, 0x3e, 0xc4, 0x2b, 0x9b, 0x7c, 0xb2, 0x07, 0x2f, 0x21, 0x5c, 0x0f, 0x73,
	0xe6, 0x2d, 0xbc, 0xe5, 0xb4, 0x98, 0x65, 0x87, 0x9a, 0xec, 0x91, 0x1b, 0xbe, 0xa2, 0x59, 0x5a,
	0x40, 0x72, 0x7c, 0x91, 0xf9, 0x94, 0x8d, 0x8b, 0xf3, 0xe3, 0xac, 0xeb, 0x7c, 0x1e, 0xc6, 0xae,
	0xf8, 0x0c, 0xa6, 0x3b, 0xa1, 0x74, 0x83, 0xb2, 0x94, 0xdb, 0xae, 0x12, 0x8a, 0x05, 0xb4, 0x15,
	0x0e, 0xfe, 0xdd, 0x55, 0xa3, 0xa4, 0x97, 0x61, 0xff, 0xc8, 0x93, 0xf4, 0x14, 0x26, 0x54, 0xc4,
	0x4d, 0xb9, 0xe3, 0x2d, 0x0b, 0x17, 0xc1, 0xd2, 0x7f, 0xf0, 0xff, 0x7b, 0x14, 0x87, 0x35, 0x6e,
	0xab, 0x56, 0x58, 0x1f, 0x91, 0x7b, 0xd6, 0x4f, 0x60, 0xdc, 0x48, 0x17, 0x1e, 0x13, 0x86, 0x16,
	0x53, 0x00, 0x6d, 0x54, 0x23, 0x5f, 0xac, 0x47, 0xe4, 0x49, 0xca, 0x20, 0xd1, 0x35, 0x76, 0x7d,
	0x2b, 0xde, 0xad, 0x4e, 0x7e, 0xaa, 0xe9, 0x22, 0x55, 0xdc, 0xdf, 0x59, 0x06, 0xe2, 0xc0, 0xf2,
	0x0c, 0xa2, 0x0a, 0xb1, 0xb5, 0x1a, 0x93, 0x46, 0x83, 0x56, 0x23, 0xfb, 0x7d, 0xb7, 0x5f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x83, 0x7d, 0xfc, 0xd3, 0xc9, 0x01, 0x00, 0x00,
}
