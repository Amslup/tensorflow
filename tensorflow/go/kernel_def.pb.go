// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/kernel_def.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type KernelDef struct {
	// Must match the name of an Op.
	Op string `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	// Type of device this kernel runs on.
	DeviceType string                      `protobuf:"bytes,2,opt,name=device_type" json:"device_type,omitempty"`
	Constraint []*KernelDef_AttrConstraint `protobuf:"bytes,3,rep,name=constraint" json:"constraint,omitempty"`
	// Names of the Op's input_/output_args that reside in host memory
	// instead of device memory.
	HostMemoryArg []string `protobuf:"bytes,4,rep,name=host_memory_arg" json:"host_memory_arg,omitempty"`
	// This allows experimental kernels to be registered for an op that
	// won't be used unless the user specifies a "_kernel" attr with
	// value matching this.
	Label string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
}

func (m *KernelDef) Reset()                    { *m = KernelDef{} }
func (m *KernelDef) String() string            { return proto.CompactTextString(m) }
func (*KernelDef) ProtoMessage()               {}
func (*KernelDef) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *KernelDef) GetConstraint() []*KernelDef_AttrConstraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

type KernelDef_AttrConstraint struct {
	// Name of an attr from the Op.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A list of values that this kernel supports for this attr.
	// Like OpDef.AttrDef.allowed_values, except for kernels instead of Ops.
	AllowedValues *AttrValue `protobuf:"bytes,2,opt,name=allowed_values" json:"allowed_values,omitempty"`
}

func (m *KernelDef_AttrConstraint) Reset()                    { *m = KernelDef_AttrConstraint{} }
func (m *KernelDef_AttrConstraint) String() string            { return proto.CompactTextString(m) }
func (*KernelDef_AttrConstraint) ProtoMessage()               {}
func (*KernelDef_AttrConstraint) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0, 0} }

func (m *KernelDef_AttrConstraint) GetAllowedValues() *AttrValue {
	if m != nil {
		return m.AllowedValues
	}
	return nil
}

func init() {
	proto.RegisterType((*KernelDef)(nil), "tensorflow.KernelDef")
	proto.RegisterType((*KernelDef_AttrConstraint)(nil), "tensorflow.KernelDef.AttrConstraint")
}

var fileDescriptor6 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x8f, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x49, 0xff, 0x08, 0x99, 0x68, 0x85, 0x15, 0x71, 0xe9, 0xa9, 0x88, 0x87, 0x22, 0x98,
	0x40, 0xbd, 0x78, 0x15, 0xbd, 0x89, 0x57, 0xaf, 0xcb, 0x36, 0x99, 0x68, 0xe9, 0x66, 0x27, 0x4c,
	0xc6, 0x96, 0x7e, 0x58, 0xbf, 0x8b, 0x9b, 0xad, 0xb4, 0xe2, 0xc1, 0xeb, 0xee, 0xbc, 0xf7, 0xfb,
	0x3d, 0xb8, 0x15, 0xf4, 0x1d, 0x71, 0xed, 0x68, 0x5b, 0x94, 0xc4, 0x58, 0xd4, 0x6c, 0x1b, 0xdc,
	0x12, 0xaf, 0x8b, 0x35, 0xb2, 0x47, 0x67, 0x2a, 0xac, 0xf3, 0x96, 0x49, 0x48, 0xc1, 0xf1, 0x76,
	0xfa, 0x4f, 0xce, 0x8a, 0xb0, 0xd9, 0x58, 0xf7, 0x89, 0xfb, 0xdc, 0xf5, 0x57, 0x02, 0xe9, 0x4b,
	0x2c, 0x7b, 0xc6, 0x5a, 0x01, 0x0c, 0xa8, 0xd5, 0xc9, 0x2c, 0x99, 0xa7, 0xea, 0x02, 0xb2, 0x0a,
	0x37, 0xab, 0x12, 0x8d, 0xec, 0x5a, 0xd4, 0x83, 0xf8, 0xf8, 0x00, 0x50, 0x92, 0xef, 0x84, 0xed,
	0xca, 0x8b, 0x1e, 0xce, 0x86, 0xf3, 0x6c, 0x71, 0x93, 0x1f, 0x79, 0xf9, 0xa1, 0x2b, 0x7f, 0x0c,
	0xa8, 0xa7, 0xc3, 0xad, 0xba, 0x82, 0xf3, 0x0f, 0xea, 0xc4, 0x34, 0xd8, 0x10, 0xef, 0x8c, 0xe5,
	0x77, 0x3d, 0x0a, 0xf1, 0x54, 0x9d, 0xc1, 0xd8, 0xd9, 0x25, 0x3a, 0x3d, 0xee, 0x09, 0xd3, 0x57,
	0x98, 0xfc, 0x49, 0x9e, 0xc2, 0xc8, 0x07, 0xff, 0x1f, 0xad, 0x3b, 0x98, 0x58, 0x17, 0x48, 0x58,
	0xed, 0x77, 0x74, 0xd1, 0x2c, 0x5b, 0x5c, 0xfe, 0xb6, 0xe8, 0x1b, 0xde, 0xfa, 0xdf, 0xe5, 0x49,
	0x9c, 0x79, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xff, 0x18, 0x82, 0xd7, 0x4c, 0x01, 0x00, 0x00,
}
