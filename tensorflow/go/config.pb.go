// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/config.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GPUOptions struct {
	// A value between 0 and 1 that indicates what fraction of the
	// available GPU memory to pre-allocate for each process.  1 means
	// to pre-allocate all of the GPU memory, 0.5 means the process
	// allocates ~50% of the available GPU memory.
	PerProcessGpuMemoryFraction float64 `protobuf:"fixed64,1,opt,name=per_process_gpu_memory_fraction" json:"per_process_gpu_memory_fraction,omitempty"`
	// The type of GPU allocation strategy to use.
	//
	// Allowed values:
	// "": The empty string (default) uses a system-chosen default
	//     which may change over time.
	//
	// "BFC": A "Best-fit with coalescing" algorithm, simplified from a
	//        version of dlmalloc.
	AllocatorType string `protobuf:"bytes,2,opt,name=allocator_type" json:"allocator_type,omitempty"`
	// Delay deletion of up to this many bytes to reduce the number of
	// interactions with gpu driver code.  If 0, the system chooses
	// a reasonable default (several MBs).
	DeferredDeletionBytes int64 `protobuf:"varint,3,opt,name=deferred_deletion_bytes" json:"deferred_deletion_bytes,omitempty"`
}

func (m *GPUOptions) Reset()                    { *m = GPUOptions{} }
func (m *GPUOptions) String() string            { return proto.CompactTextString(m) }
func (*GPUOptions) ProtoMessage()               {}
func (*GPUOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type GraphOptions struct {
	// If true, do not attempt to optimize the graph using common
	// subexpression elimination.
	SkipCommonSubexpressionElimination bool `protobuf:"varint,1,opt,name=skip_common_subexpression_elimination" json:"skip_common_subexpression_elimination,omitempty"`
	// If true, use control flow to schedule the activation of Recv nodes.
	// (Currently ignored.)
	EnableRecvScheduling bool `protobuf:"varint,2,opt,name=enable_recv_scheduling" json:"enable_recv_scheduling,omitempty"`
}

func (m *GraphOptions) Reset()                    { *m = GraphOptions{} }
func (m *GraphOptions) String() string            { return proto.CompactTextString(m) }
func (*GraphOptions) ProtoMessage()               {}
func (*GraphOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// Session configuration parameters.
// The system picks an appropriate values for fields that are not set.
type ConfigProto struct {
	// Map from device type name (e.g., "CPU" or "GPU" ) to maximum
	// number of devices of that type to use.  If a particular device
	// type is not found in the map, the system picks an appropriate
	// number.
	DeviceCount map[string]int32 `protobuf:"bytes,1,rep,name=device_count" json:"device_count,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// The execution of an individual op (for some op types) can be
	// parallelized on a pool of intra_op_parallelism_threads.
	// 0 means the system picks an appropriate number.
	IntraOpParallelismThreads int32 `protobuf:"varint,2,opt,name=intra_op_parallelism_threads" json:"intra_op_parallelism_threads,omitempty"`
	// Nodes that perform blocking operations are enqueued on a pool of
	// inter_op_parallelism_threads available in each process.
	//
	// 0 means the system picks an appropriate number.
	//
	// Note that the first Session created in the process sets the
	// number of threads for all future sessions unless use_per_session_threads is
	// true.
	InterOpParallelismThreads int32 `protobuf:"varint,5,opt,name=inter_op_parallelism_threads" json:"inter_op_parallelism_threads,omitempty"`
	// If true, use a new set of threads for this session rather than the global
	// pool of threads. Only supported by direct sessions.
	//
	// If false, use the global threads created by the first session.
	UsePerSessionThreads bool `protobuf:"varint,9,opt,name=use_per_session_threads" json:"use_per_session_threads,omitempty"`
	// Assignment of Nodes to Devices is recomputed every placement_period
	// steps until the system warms up (at which point the recomputation
	// typically slows down automatically).
	PlacementPeriod int32 `protobuf:"varint,3,opt,name=placement_period" json:"placement_period,omitempty"`
	// When any filters are present sessions will ignore all devices which do not
	// match the filters. Each filter can be partially specified, e.g. "/job:ps"
	// "/job:worker/replica:3", etc.
	DeviceFilters []string `protobuf:"bytes,4,rep,name=device_filters" json:"device_filters,omitempty"`
	// Options that apply to all GPUs.
	GpuOptions *GPUOptions `protobuf:"bytes,6,opt,name=gpu_options" json:"gpu_options,omitempty"`
	// Whether soft placement is allowed. If allow_soft_placement is true,
	// an op will be placed on CPU if
	//   1. there's no GPU implementation for the OP
	// or
	//   2. no GPU devices are known or registered
	// or
	//   3. need to co-locate with reftype input(s) which are from CPU.
	AllowSoftPlacement bool `protobuf:"varint,7,opt,name=allow_soft_placement" json:"allow_soft_placement,omitempty"`
	// Whether device placements should be logged.
	LogDevicePlacement bool `protobuf:"varint,8,opt,name=log_device_placement" json:"log_device_placement,omitempty"`
	// Options that apply to all graphs.
	GraphOptions *GraphOptions `protobuf:"bytes,10,opt,name=graph_options" json:"graph_options,omitempty"`
}

func (m *ConfigProto) Reset()                    { *m = ConfigProto{} }
func (m *ConfigProto) String() string            { return proto.CompactTextString(m) }
func (*ConfigProto) ProtoMessage()               {}
func (*ConfigProto) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ConfigProto) GetDeviceCount() map[string]int32 {
	if m != nil {
		return m.DeviceCount
	}
	return nil
}

func (m *ConfigProto) GetGpuOptions() *GPUOptions {
	if m != nil {
		return m.GpuOptions
	}
	return nil
}

func (m *ConfigProto) GetGraphOptions() *GraphOptions {
	if m != nil {
		return m.GraphOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*GPUOptions)(nil), "tensorflow.GPUOptions")
	proto.RegisterType((*GraphOptions)(nil), "tensorflow.GraphOptions")
	proto.RegisterType((*ConfigProto)(nil), "tensorflow.ConfigProto")
}

var fileDescriptor2 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x86, 0xd5, 0x85, 0x8c, 0xf6, 0x64, 0x43, 0x53, 0x84, 0x4a, 0x84, 0x26, 0x86, 0x2a, 0x3e,
	0x2a, 0x21, 0x5a, 0xa9, 0xdc, 0x20, 0x2e, 0xb8, 0x19, 0x68, 0x97, 0xec, 0x86, 0x4b, 0x64, 0xb9,
	0xc9, 0x49, 0x6a, 0xd5, 0xb1, 0x2d, 0xdb, 0x69, 0xc9, 0x5f, 0xe3, 0xd7, 0x71, 0xec, 0xf5, 0x0b,
	0xa1, 0xdd, 0x25, 0xf1, 0x63, 0x3f, 0x79, 0xdf, 0x63, 0x78, 0xe7, 0x51, 0x39, 0x6d, 0x6b, 0xa9,
	0xb7, 0xf3, 0x52, 0x5b, 0x9c, 0xd7, 0x96, 0xb7, 0xb8, 0xd5, 0x76, 0x4d, 0xaf, 0xaa, 0x16, 0xcd,
	0xcc, 0x58, 0xed, 0x75, 0x0e, 0x47, 0x6e, 0xa2, 0x00, 0xee, 0xee, 0x7f, 0xfe, 0x30, 0x5e, 0x68,
	0xe5, 0xf2, 0xf7, 0x70, 0x63, 0xd0, 0x32, 0xc2, 0x4a, 0x74, 0x8e, 0x35, 0xa6, 0x63, 0x2d, 0xb6,
	0xda, 0xf6, 0x8c, 0x8e, 0x2a, 0x03, 0x53, 0x0c, 0x5e, 0x0f, 0xa6, 0x83, 0x7c, 0x0c, 0xcf, 0xb8,
	0x94, 0xba, 0xe4, 0x5e, 0x5b, 0xe6, 0x7b, 0x83, 0xc5, 0x19, 0x7d, 0x1f, 0xe5, 0x37, 0xf0, 0xa2,
	0xc2, 0x1a, 0xad, 0xc5, 0x8a, 0x55, 0x28, 0x31, 0x6c, 0x61, 0xcb, 0xde, 0xa3, 0x2b, 0x12, 0x02,
	0x92, 0xc9, 0x2f, 0xb8, 0xb8, 0xb3, 0xdc, 0xac, 0xf6, 0xc6, 0x8f, 0xf0, 0xd6, 0xad, 0x85, 0x61,
	0xa5, 0x6e, 0x5b, 0x42, 0x5d, 0xb7, 0xc4, 0xdf, 0xc6, 0x92, 0x3c, 0x6c, 0x44, 0x29, 0x5a, 0xa1,
	0xf8, 0xc1, 0x3b, 0xcc, 0x5f, 0xc1, 0x18, 0x15, 0x5f, 0x4a, 0x64, 0x16, 0xcb, 0x0d, 0x73, 0xe5,
	0x0a, 0xab, 0x4e, 0x0a, 0xd5, 0x44, 0xff, 0x70, 0xf2, 0x27, 0x81, 0xec, 0x36, 0x66, 0xbd, 0x8f,
	0x51, 0xbf, 0xc2, 0x45, 0x85, 0x1b, 0x51, 0x22, 0x09, 0x3a, 0xe5, 0xe9, 0x94, 0x64, 0x9a, 0x2d,
	0xa6, 0xb3, 0x63, 0x03, 0xb3, 0x13, 0x7c, 0xf6, 0x2d, 0xb2, 0xb7, 0x01, 0xfd, 0xae, 0xbc, 0xed,
	0xf3, 0x37, 0x70, 0x2d, 0xe8, 0x81, 0x33, 0x6d, 0x98, 0xe1, 0x96, 0x32, 0xd3, 0x3f, 0xb9, 0x96,
	0xf9, 0x95, 0x45, 0x5e, 0xb9, 0x68, 0x4d, 0x77, 0x14, 0x15, 0xf7, 0x08, 0x95, 0x46, 0x8a, 0xba,
	0xe9, 0x1c, 0xb2, 0x50, 0xb0, 0xdb, 0x05, 0xdc, 0x03, 0xa3, 0x18, 0xae, 0x80, 0x2b, 0x23, 0x79,
	0x89, 0x2d, 0x2a, 0x1f, 0x30, 0xa1, 0xab, 0xd8, 0x5a, 0x1a, 0xea, 0xde, 0xc5, 0xa8, 0x85, 0x24,
	0x91, 0x2b, 0x9e, 0x50, 0x90, 0x51, 0xfe, 0x01, 0xb2, 0x30, 0x23, 0xfd, 0x50, 0x66, 0x71, 0x4e,
	0x70, 0xb6, 0x18, 0x9f, 0xa6, 0x3b, 0x19, 0xee, 0x35, 0x3c, 0x0f, 0x33, 0xdb, 0x32, 0xa7, 0x6b,
	0x3a, 0x7f, 0x6f, 0x2a, 0x9e, 0x46, 0x39, 0xad, 0x4a, 0xdd, 0xb0, 0x9d, 0xe6, 0xb8, 0x3a, 0x8c,
	0xab, 0x73, 0xb8, 0x6c, 0xc2, 0xd8, 0x0e, 0x2a, 0x88, 0xaa, 0xe2, 0x1f, 0xd5, 0xc9, 0x5c, 0x5f,
	0x2e, 0xe0, 0xea, 0xbf, 0x32, 0x33, 0x48, 0xd6, 0xd8, 0xc7, 0x49, 0x8e, 0xf2, 0x4b, 0x48, 0x37,
	0x5c, 0x76, 0x0f, 0x17, 0x27, 0xfd, 0x72, 0xf6, 0x79, 0xb0, 0x3c, 0x8f, 0xd7, 0xf3, 0xd3, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x3d, 0x3c, 0xf8, 0xc8, 0x02, 0x00, 0x00,
}
