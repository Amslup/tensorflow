// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/summary.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Serialization format for histogram module in
// core/lib/histogram/histogram.h
type HistogramProto struct {
	Min        float64 `protobuf:"fixed64,1,opt,name=min" json:"min,omitempty"`
	Max        float64 `protobuf:"fixed64,2,opt,name=max" json:"max,omitempty"`
	Num        float64 `protobuf:"fixed64,3,opt,name=num" json:"num,omitempty"`
	Sum        float64 `protobuf:"fixed64,4,opt,name=sum" json:"sum,omitempty"`
	SumSquares float64 `protobuf:"fixed64,5,opt,name=sum_squares" json:"sum_squares,omitempty"`
	// Parallel arrays encoding the bucket boundaries and the bucket values.
	// bucket(i) is the count for the bucket i.  The range for
	// a bucket is:
	//   i == 0:  -DBL_MAX .. bucket_limit(0)
	//   i != 0:  bucket_limit(i-1) .. bucket_limit(i)
	BucketLimit []float64 `protobuf:"fixed64,6,rep,packed,name=bucket_limit" json:"bucket_limit,omitempty"`
	Bucket      []float64 `protobuf:"fixed64,7,rep,packed,name=bucket" json:"bucket,omitempty"`
}

func (m *HistogramProto) Reset()                    { *m = HistogramProto{} }
func (m *HistogramProto) String() string            { return proto.CompactTextString(m) }
func (*HistogramProto) ProtoMessage()               {}
func (*HistogramProto) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

// A Summary is a set of named values to be displayed by the
// visualizer.
//
// Summaries are produced regularly during training, as controlled by
// the "summary_interval_secs" attribute of the training operation.
// Summaries are also produced at the end of an evaluation.
type Summary struct {
	// Set of values for the summary.
	Value []*Summary_Value `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *Summary) Reset()                    { *m = Summary{} }
func (m *Summary) String() string            { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()               {}
func (*Summary) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *Summary) GetValue() []*Summary_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type Summary_Image struct {
	// Dimensions of the image.
	Height int32 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Width  int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	// Valid colorspace values are
	//   1 - grayscale
	//   2 - grayscale + alpha
	//   3 - RGB
	//   4 - RGBA
	//   5 - DIGITAL_YUV
	//   6 - BGRA
	Colorspace int32 `protobuf:"varint,3,opt,name=colorspace" json:"colorspace,omitempty"`
	// Image data in encoded format.  All image formats supported by
	// image_codec::CoderUtil can be stored here.
	EncodedImageString []byte `protobuf:"bytes,4,opt,name=encoded_image_string,proto3" json:"encoded_image_string,omitempty"`
}

func (m *Summary_Image) Reset()                    { *m = Summary_Image{} }
func (m *Summary_Image) String() string            { return proto.CompactTextString(m) }
func (*Summary_Image) ProtoMessage()               {}
func (*Summary_Image) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1, 0} }

type Summary_Value struct {
	// Tag name for the data.  Will be used as the title of the graph
	// in the visualizer.
	//
	// Tag is usually "op_name:value_name", where "op_name" itself can have
	// structure to indicate grouping.
	Tag string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	// Value associated with the tag.
	//
	// Types that are valid to be assigned to Value:
	//	*Summary_Value_SimpleValue
	//	*Summary_Value_ObsoleteOldStyleHistogram
	//	*Summary_Value_Image
	//	*Summary_Value_Histo
	Value isSummary_Value_Value `protobuf_oneof:"value"`
}

func (m *Summary_Value) Reset()                    { *m = Summary_Value{} }
func (m *Summary_Value) String() string            { return proto.CompactTextString(m) }
func (*Summary_Value) ProtoMessage()               {}
func (*Summary_Value) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1, 1} }

type isSummary_Value_Value interface {
	isSummary_Value_Value()
}

type Summary_Value_SimpleValue struct {
	SimpleValue float32 `protobuf:"fixed32,2,opt,name=simple_value,oneof"`
}
type Summary_Value_ObsoleteOldStyleHistogram struct {
	ObsoleteOldStyleHistogram []byte `protobuf:"bytes,3,opt,name=obsolete_old_style_histogram,proto3,oneof"`
}
type Summary_Value_Image struct {
	Image *Summary_Image `protobuf:"bytes,4,opt,name=image,oneof"`
}
type Summary_Value_Histo struct {
	Histo *HistogramProto `protobuf:"bytes,5,opt,name=histo,oneof"`
}

func (*Summary_Value_SimpleValue) isSummary_Value_Value()               {}
func (*Summary_Value_ObsoleteOldStyleHistogram) isSummary_Value_Value() {}
func (*Summary_Value_Image) isSummary_Value_Value()                     {}
func (*Summary_Value_Histo) isSummary_Value_Value()                     {}

func (m *Summary_Value) GetValue() isSummary_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Summary_Value) GetSimpleValue() float32 {
	if x, ok := m.GetValue().(*Summary_Value_SimpleValue); ok {
		return x.SimpleValue
	}
	return 0
}

func (m *Summary_Value) GetObsoleteOldStyleHistogram() []byte {
	if x, ok := m.GetValue().(*Summary_Value_ObsoleteOldStyleHistogram); ok {
		return x.ObsoleteOldStyleHistogram
	}
	return nil
}

func (m *Summary_Value) GetImage() *Summary_Image {
	if x, ok := m.GetValue().(*Summary_Value_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Summary_Value) GetHisto() *HistogramProto {
	if x, ok := m.GetValue().(*Summary_Value_Histo); ok {
		return x.Histo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Summary_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Summary_Value_OneofMarshaler, _Summary_Value_OneofUnmarshaler, _Summary_Value_OneofSizer, []interface{}{
		(*Summary_Value_SimpleValue)(nil),
		(*Summary_Value_ObsoleteOldStyleHistogram)(nil),
		(*Summary_Value_Image)(nil),
		(*Summary_Value_Histo)(nil),
	}
}

func _Summary_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Summary_Value)
	// value
	switch x := m.Value.(type) {
	case *Summary_Value_SimpleValue:
		b.EncodeVarint(2<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.SimpleValue)))
	case *Summary_Value_ObsoleteOldStyleHistogram:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ObsoleteOldStyleHistogram)
	case *Summary_Value_Image:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Summary_Value_Histo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Histo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Summary_Value.Value has unexpected type %T", x)
	}
	return nil
}

func _Summary_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Summary_Value)
	switch tag {
	case 2: // value.simple_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Summary_Value_SimpleValue{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // value.obsolete_old_style_histogram
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Summary_Value_ObsoleteOldStyleHistogram{x}
		return true, err
	case 4: // value.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Summary_Image)
		err := b.DecodeMessage(msg)
		m.Value = &Summary_Value_Image{msg}
		return true, err
	case 5: // value.histo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HistogramProto)
		err := b.DecodeMessage(msg)
		m.Value = &Summary_Value_Histo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Summary_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Summary_Value)
	// value
	switch x := m.Value.(type) {
	case *Summary_Value_SimpleValue:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *Summary_Value_ObsoleteOldStyleHistogram:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ObsoleteOldStyleHistogram)))
		n += len(x.ObsoleteOldStyleHistogram)
	case *Summary_Value_Image:
		s := proto.Size(x.Image)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Summary_Value_Histo:
		s := proto.Size(x.Histo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HistogramProto)(nil), "tensorflow.HistogramProto")
	proto.RegisterType((*Summary)(nil), "tensorflow.Summary")
	proto.RegisterType((*Summary_Image)(nil), "tensorflow.Summary.Image")
	proto.RegisterType((*Summary_Value)(nil), "tensorflow.Summary.Value")
}

var fileDescriptor9 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x51, 0x4d, 0xae, 0xd3, 0x30,
	0x10, 0x6e, 0x12, 0x9c, 0x8a, 0x49, 0xa8, 0x90, 0x41, 0xc8, 0x54, 0x5d, 0x54, 0x5d, 0x40, 0x04,
	0x52, 0x2a, 0x95, 0x1b, 0x74, 0x55, 0x76, 0x48, 0x48, 0x88, 0x5d, 0xe4, 0x26, 0x6e, 0x62, 0x35,
	0x8e, 0x8b, 0xed, 0x50, 0x7a, 0x02, 0x6e, 0xc4, 0x11, 0x38, 0xd7, 0x73, 0xa6, 0x8d, 0xfa, 0xde,
	0xe2, 0x2d, 0xbf, 0x99, 0x4f, 0xdf, 0xcf, 0x0c, 0x7c, 0x74, 0xa2, 0xb3, 0xda, 0x1c, 0x5a, 0x7d,
	0x5e, 0x97, 0xda, 0x88, 0xf5, 0xc1, 0x70, 0x25, 0xce, 0xda, 0x1c, 0xd7, 0xb6, 0x57, 0x8a, 0x9b,
	0x4b, 0x7e, 0x32, 0xda, 0x69, 0x0a, 0x77, 0xe2, 0xea, 0x6f, 0x00, 0xb3, 0x9d, 0xb4, 0x4e, 0xd7,
	0x9e, 0xfc, 0x0d, 0xd7, 0x09, 0x44, 0x4a, 0x76, 0x2c, 0x58, 0x06, 0x59, 0x80, 0x80, 0xff, 0x61,
	0xe1, 0x08, 0xba, 0x5e, 0xb1, 0x68, 0x04, 0x5e, 0x96, 0xbd, 0x40, 0xf0, 0x06, 0x12, 0x0f, 0x0a,
	0xfb, 0xab, 0xe7, 0x46, 0x58, 0x46, 0x70, 0xc8, 0x20, 0xdd, 0xf7, 0xe5, 0x51, 0xb8, 0xa2, 0x95,
	0x4a, 0x3a, 0x16, 0x2f, 0xa3, 0x2c, 0xd8, 0x86, 0xaf, 0x03, 0x4a, 0x21, 0xbe, 0x6e, 0xd8, 0x74,
	0x9c, 0xad, 0xfe, 0x87, 0x30, 0xfd, 0x7e, 0xcd, 0x49, 0x33, 0x20, 0xbf, 0x79, 0xdb, 0x0b, 0x1f,
	0x22, 0xca, 0x92, 0xcd, 0xfb, 0xfc, 0x9e, 0x38, 0xbf, 0x71, 0xf2, 0x1f, 0x03, 0x61, 0xfe, 0x13,
	0xc8, 0x57, 0xc5, 0x6b, 0x41, 0x67, 0x10, 0x37, 0x42, 0xd6, 0x8d, 0xc3, 0xe0, 0x84, 0xbe, 0x02,
	0x72, 0x96, 0x95, 0x6b, 0x30, 0x3a, 0xf1, 0x8e, 0x50, 0xea, 0x56, 0x1b, 0x7b, 0xe2, 0xa5, 0xc0,
	0x06, 0x84, 0x2e, 0xe0, 0xad, 0xe8, 0x4a, 0x5d, 0x89, 0xaa, 0x90, 0x83, 0x46, 0x61, 0x9d, 0x91,
	0x5d, 0x8d, 0x95, 0xd2, 0xf9, 0xbf, 0x00, 0x08, 0x7a, 0x0c, 0x4d, 0x1d, 0xaf, 0x51, 0xf7, 0x25,
	0x7d, 0x07, 0xa9, 0x95, 0xea, 0xd4, 0x8a, 0xe2, 0x9a, 0x70, 0x90, 0x0f, 0x77, 0x13, 0xfa, 0x01,
	0x16, 0x7a, 0x6f, 0x75, 0x2b, 0x9c, 0x28, 0x74, 0x5b, 0x79, 0xad, 0x8b, 0xe7, 0x34, 0xe3, 0x69,
	0xd1, 0x32, 0xf5, 0xbc, 0x4f, 0x40, 0xd0, 0x0c, 0x5d, 0x9e, 0xa9, 0x86, 0x8d, 0x3c, 0xf7, 0x33,
	0x10, 0x14, 0xc0, 0x7b, 0x26, 0x9b, 0xf9, 0x63, 0xee, 0xd3, 0xa7, 0xed, 0x26, 0xdb, 0xe9, 0xed,
	0x66, 0xfb, 0x18, 0xbf, 0xfc, 0xe5, 0x21, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x76, 0x46, 0x27, 0x10,
	0x02, 0x00, 0x00,
}
