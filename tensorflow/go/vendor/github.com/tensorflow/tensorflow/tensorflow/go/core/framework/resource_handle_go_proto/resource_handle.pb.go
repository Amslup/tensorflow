// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/framework/resource_handle.proto

package resource_handle_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	tensor_shape_go_proto "github.com/tensorflow/tensorflow/tensorflow/go/core/framework/tensor_shape_go_proto"
	types_go_proto "github.com/tensorflow/tensorflow/tensorflow/go/core/framework/types_go_proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
type ResourceHandleProto struct {
	// Unique name for the device containing the resource.
	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Container in which this resource is placed.
	Container string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	// Unique name of this resource.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Hash code for the type of the resource. Is only valid in the same device
	// and in the same execution.
	HashCode uint64 `protobuf:"varint,4,opt,name=hash_code,json=hashCode,proto3" json:"hash_code,omitempty"`
	// For debug-only, the name of the type pointed to by this handle, if
	// available.
	MaybeTypeName string `protobuf:"bytes,5,opt,name=maybe_type_name,json=maybeTypeName,proto3" json:"maybe_type_name,omitempty"`
	// Data types and shapes for the underlying resource.
	DtypesAndShapes      []*ResourceHandleProto_DtypeAndShape `protobuf:"bytes,6,rep,name=dtypes_and_shapes,json=dtypesAndShapes,proto3" json:"dtypes_and_shapes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ResourceHandleProto) Reset()         { *m = ResourceHandleProto{} }
func (m *ResourceHandleProto) String() string { return proto.CompactTextString(m) }
func (*ResourceHandleProto) ProtoMessage()    {}
func (*ResourceHandleProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36024d2bd9a2afd, []int{0}
}

func (m *ResourceHandleProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceHandleProto.Unmarshal(m, b)
}
func (m *ResourceHandleProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceHandleProto.Marshal(b, m, deterministic)
}
func (m *ResourceHandleProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceHandleProto.Merge(m, src)
}
func (m *ResourceHandleProto) XXX_Size() int {
	return xxx_messageInfo_ResourceHandleProto.Size(m)
}
func (m *ResourceHandleProto) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceHandleProto.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceHandleProto proto.InternalMessageInfo

func (m *ResourceHandleProto) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ResourceHandleProto) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ResourceHandleProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceHandleProto) GetHashCode() uint64 {
	if m != nil {
		return m.HashCode
	}
	return 0
}

func (m *ResourceHandleProto) GetMaybeTypeName() string {
	if m != nil {
		return m.MaybeTypeName
	}
	return ""
}

func (m *ResourceHandleProto) GetDtypesAndShapes() []*ResourceHandleProto_DtypeAndShape {
	if m != nil {
		return m.DtypesAndShapes
	}
	return nil
}

// Protocol buffer representing a pair of (data type, tensor shape).
type ResourceHandleProto_DtypeAndShape struct {
	Dtype                types_go_proto.DataType                 `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape                *tensor_shape_go_proto.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *ResourceHandleProto_DtypeAndShape) Reset()         { *m = ResourceHandleProto_DtypeAndShape{} }
func (m *ResourceHandleProto_DtypeAndShape) String() string { return proto.CompactTextString(m) }
func (*ResourceHandleProto_DtypeAndShape) ProtoMessage()    {}
func (*ResourceHandleProto_DtypeAndShape) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36024d2bd9a2afd, []int{0, 0}
}

func (m *ResourceHandleProto_DtypeAndShape) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceHandleProto_DtypeAndShape.Unmarshal(m, b)
}
func (m *ResourceHandleProto_DtypeAndShape) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceHandleProto_DtypeAndShape.Marshal(b, m, deterministic)
}
func (m *ResourceHandleProto_DtypeAndShape) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceHandleProto_DtypeAndShape.Merge(m, src)
}
func (m *ResourceHandleProto_DtypeAndShape) XXX_Size() int {
	return xxx_messageInfo_ResourceHandleProto_DtypeAndShape.Size(m)
}
func (m *ResourceHandleProto_DtypeAndShape) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceHandleProto_DtypeAndShape.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceHandleProto_DtypeAndShape proto.InternalMessageInfo

func (m *ResourceHandleProto_DtypeAndShape) GetDtype() types_go_proto.DataType {
	if m != nil {
		return m.Dtype
	}
	return types_go_proto.DataType_DT_INVALID
}

func (m *ResourceHandleProto_DtypeAndShape) GetShape() *tensor_shape_go_proto.TensorShapeProto {
	if m != nil {
		return m.Shape
	}
	return nil
}

func init() {
	proto.RegisterType((*ResourceHandleProto)(nil), "tensorflow.ResourceHandleProto")
	proto.RegisterType((*ResourceHandleProto_DtypeAndShape)(nil), "tensorflow.ResourceHandleProto.DtypeAndShape")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/resource_handle.proto", fileDescriptor_a36024d2bd9a2afd)
}

var fileDescriptor_a36024d2bd9a2afd = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x25, 0xfd, 0xc7, 0xaf, 0x5b, 0xda, 0xf2, 0x5b, 0x45, 0x42, 0xed, 0xa1, 0x08, 0x4a, 0x11,
	0x4d, 0x20, 0x7e, 0x02, 0x6b, 0x0f, 0x9e, 0x44, 0x62, 0x11, 0xf4, 0xb2, 0x6c, 0x93, 0x69, 0x52,
	0x6c, 0x76, 0xc2, 0x6e, 0x6a, 0xe9, 0x27, 0xf0, 0xeb, 0x7a, 0xf4, 0x28, 0x99, 0x54, 0x1b, 0xa5,
	0xea, 0x6d, 0x76, 0xe6, 0xbd, 0x37, 0xef, 0xed, 0x2e, 0x73, 0x33, 0x50, 0x06, 0xf5, 0x6c, 0x81,
	0x2b, 0x37, 0x40, 0x0d, 0xee, 0x4c, 0xcb, 0x04, 0x56, 0xa8, 0x9f, 0x5c, 0x0d, 0x06, 0x97, 0x3a,
	0x00, 0x11, 0x4b, 0x15, 0x2e, 0xc0, 0x49, 0x35, 0x66, 0xc8, 0xd9, 0x96, 0xd0, 0x3b, 0xfb, 0x99,
	0x5c, 0x4c, 0x84, 0x89, 0x65, 0xba, 0x61, 0xf6, 0x8e, 0x7f, 0x41, 0xaf, 0x53, 0x30, 0x05, 0xec,
	0xe8, 0xb5, 0xc2, 0xf6, 0xfc, 0xcd, 0xea, 0x6b, 0xda, 0x7c, 0x4b, 0x8b, 0x0f, 0x58, 0x23, 0x84,
	0xe7, 0x79, 0x00, 0xb6, 0x35, 0xb0, 0x86, 0x4d, 0x7f, 0x73, 0xe2, 0x7d, 0xd6, 0x0c, 0x50, 0x65,
	0x72, 0xae, 0x40, 0xdb, 0x15, 0x1a, 0x6d, 0x1b, 0x9c, 0xb3, 0x9a, 0x92, 0x09, 0xd8, 0x55, 0x1a,
	0x50, 0xcd, 0x0f, 0x59, 0x33, 0x96, 0x26, 0x16, 0x01, 0x86, 0x60, 0xd7, 0x06, 0xd6, 0xb0, 0xe6,
	0xff, 0xcb, 0x1b, 0x57, 0x18, 0x02, 0x3f, 0x61, 0xdd, 0x44, 0xae, 0xa7, 0x20, 0x72, 0x4f, 0x82,
	0xb8, 0x75, 0xe2, 0xb6, 0xa9, 0x3d, 0x59, 0xa7, 0x70, 0x93, 0x8b, 0x3c, 0xb0, 0xff, 0x21, 0xd9,
	0x16, 0x52, 0x85, 0x45, 0x4e, 0x63, 0x37, 0x06, 0xd5, 0x61, 0xcb, 0x3b, 0x77, 0xb6, 0x49, 0x9d,
	0x1d, 0x51, 0x9c, 0x71, 0x4e, 0xbc, 0x54, 0xe1, 0x5d, 0xce, 0xf2, 0xbb, 0x85, 0xce, 0xc7, 0xd9,
	0xf4, 0x90, 0xb5, 0xbf, 0x20, 0xf8, 0x29, 0xab, 0x13, 0x86, 0x92, 0x77, 0xbc, 0xfd, 0xb2, 0xfe,
	0x58, 0x66, 0x32, 0x37, 0xe5, 0x17, 0x10, 0xee, 0xb1, 0x3a, 0x99, 0xa1, 0xab, 0x68, 0x79, 0xfd,
	0x32, 0x76, 0x42, 0x25, 0x69, 0x92, 0x11, 0xbf, 0x80, 0x8e, 0x5e, 0x2c, 0x66, 0xa3, 0x8e, 0xca,
	0xd0, 0xcf, 0xb7, 0x19, 0x75, 0xbe, 0x25, 0xb0, 0x1e, 0xef, 0xa3, 0x79, 0x16, 0x2f, 0xa7, 0x4e,
	0x80, 0x49, 0xf9, 0xfb, 0xec, 0x2e, 0x23, 0xfc, 0xe3, 0x5f, 0x89, 0x08, 0x05, 0xbd, 0xfc, 0x9b,
	0x65, 0x4d, 0x1b, 0x54, 0x5d, 0xbc, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xd6, 0x6d, 0x36, 0x97,
	0x02, 0x00, 0x00,
}
